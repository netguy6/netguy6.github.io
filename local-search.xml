<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQLmap基本使用</title>
    <link href="/2025/09/26/sqlmap/"/>
    <url>/2025/09/26/sqlmap/</url>
    
    <content type="html"><![CDATA[<h2 id="SQLmap基本使用"><a href="#SQLmap基本使用" class="headerlink" title="SQLmap基本使用"></a>SQLmap基本使用</h2><h3 id="基本必要参数"><a href="#基本必要参数" class="headerlink" title="基本必要参数"></a>基本必要参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">更新 SQLmap<br><span class="hljs-comment">--update</span><br>只需确认是否可注入，并只显示 payload 技术与后端技术<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot;<br>获取数据库<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-comment">--dbs</span><br>获取数据库所有数据表<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-operator">-</span>D database <span class="hljs-comment">--tables</span><br>获取指定数据表的字段<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-operator">-</span>D database <span class="hljs-operator">-</span>T <span class="hljs-keyword">table</span> <span class="hljs-comment">--columns</span><br>获取指定数据表的指定字段数据<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-operator">-</span>D database <span class="hljs-operator">-</span>T <span class="hljs-keyword">table</span> <span class="hljs-operator">-</span>C field1,field2 <span class="hljs-comment">--dump</span><br>获取指定数据表的所有字段数据（去掉 <span class="hljs-operator">-</span> C 参数即可）<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-operator">-</span>D database <span class="hljs-operator">-</span>T <span class="hljs-keyword">table</span> <span class="hljs-comment">--dump</span><br>不指定数据表，直接获取该指定数据库的所有数据<br>sqlmap <span class="hljs-operator">-</span>u &quot;URL&quot; <span class="hljs-operator">-</span>D database <span class="hljs-comment">--dump-all</span><br></code></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 使用随机选择的 HTTP <span class="hljs-keyword">User</span><span class="hljs-operator">-</span>Agent 标头值，用于绕过 WAF<br><span class="hljs-comment">--random-agent</span><br><br># POST 数据<br># 也可注入json，看网站怎么发送请求，<span class="hljs-comment">--data &quot;&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;&quot; 或者 --data &#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&#x27;</span><br><span class="hljs-comment">--data &quot;a=1&amp;b=2&quot;</span><br><br># 使用情景通常发生在，某些登录后的页面才有注入点，不加cookie就访问不到该网站<br># 当然也有些网站即使没登录，但是没cookie一样访问不到<br><span class="hljs-comment">--cookie &quot;SESSION_ID=xxx;abc=xxx;&quot;</span><br><br># 使用情景通常是不加的话，可能会被后端或者防火墙拦截等等<br># 如果在header中已经指定<span class="hljs-keyword">User</span><span class="hljs-operator">-</span>Agent，就别加<span class="hljs-comment">--random-agent参数</span><br><span class="hljs-comment">--header &quot;User-Agent: Mozilla/5.0 (Windows NT ...&quot;</span><br><br># 指定注入参数<br><span class="hljs-operator">-</span>p par1,par2<br><br># 跳过注入参数<br><span class="hljs-comment">--skip par1,par2</span><br><br># 指定注入技术，不使用此参数，默认就是全测，有 BEUSTQ<br># B <span class="hljs-operator">=</span> <span class="hljs-type">boolean</span><span class="hljs-operator">-</span>based<br># E <span class="hljs-operator">=</span> error<span class="hljs-operator">-</span>based<br># U <span class="hljs-operator">=</span> <span class="hljs-keyword">union</span><span class="hljs-operator">-</span>based<br># S <span class="hljs-operator">=</span> stacked<span class="hljs-operator">-</span>queries<br># T <span class="hljs-operator">=</span> <span class="hljs-type">time</span><span class="hljs-operator">-</span>based<br># Q <span class="hljs-operator">=</span> inline<span class="hljs-operator">-</span>queries<br><span class="hljs-comment">--technique BEQU</span><br><br># 指定 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 的 <span class="hljs-keyword">column</span> 列数<br># 可以手动 fuzzing 出来指定<br><span class="hljs-comment">--union-cols 5</span><br><br># 指定使用<span class="hljs-keyword">union</span>技术时，每个字段的值是多少<br># 例如，假设已知cols为<span class="hljs-number">5</span>，且<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>，<span class="hljs-number">2</span>跟<span class="hljs-number">5</span>可回显数据<br># 如果我想指定注入<span class="hljs-number">2</span>的位置，可以这样设置<br># <span class="hljs-comment">--union-values &quot;1,*,3,4,5&quot;</span><br><span class="hljs-comment">--union-values &quot;1,*,3,4,5&quot;</span><br><br># 指定payload前缀<br><span class="hljs-comment">--prefix &quot;&#x27;&quot;</span><br><br># 指定payload后缀<br><span class="hljs-comment">--suffix &quot;-- a&quot;</span><br><br># 显示注入过程详细信息，数字越大越详细<br># (<span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">6</span>，默认是<span class="hljs-number">1</span>，常用是<span class="hljs-number">3</span>，手动可注入但SQLmap找不到时，可以设<span class="hljs-number">6</span>协助调试)<br># 使用情景通常发生在fuzzing时的注入<br><span class="hljs-operator">-</span>v <span class="hljs-number">3</span><br><br># 指定后端数据库类型<br># 中间有空格要使用双引号，如：&quot;Microsoft Access&quot;<br><span class="hljs-comment">--dbms mysql</span><br><br># 自动模式，自动选取默认选项<br><span class="hljs-comment">--batch</span><br><br># 跳过防火墙检测测试<br><span class="hljs-comment">--skip-waf</span><br><br># 设定SQLmap注入检测风险技术，等级<span class="hljs-number">1</span><span class="hljs-operator">~</span><span class="hljs-number">3</span>，默认<span class="hljs-number">1</span><br># ps. 原本仅使用<span class="hljs-keyword">AND</span>，会变成<span class="hljs-keyword">OR</span>也使用<br># 在某些注入的情景可能会误操作数据库数据，因此请谨慎使用<br><span class="hljs-comment">--risk N</span><br><br><br># 设定SQLmap注入检测层级，默认 <span class="hljs-number">1</span>，每个层级的说明如下<br># Level <span class="hljs-number">1</span>：在 Level <span class="hljs-number">1</span> 中，SQLmap 会执行基本的测试，包括以下方面：<br>#   检测基本的 <span class="hljs-keyword">SQL</span> 注入点。<br>#   基于 <span class="hljs-keyword">UNION</span> 运算符的简单注入测试。<br>#   基本的布尔型注入测试，如 <span class="hljs-keyword">AND</span><span class="hljs-operator">/</span><span class="hljs-keyword">OR</span> payload 测试。<br><br># Level <span class="hljs-number">2</span>：在 Level <span class="hljs-number">2</span> 中，SQLmap 将进行进一步的测试，包括：<br>#   检测复杂的 <span class="hljs-keyword">SQL</span> 注入点，如带有过滤机制的情况。<br>#   测试基于时间延迟的注入，以绕过某些安全检测。<br>#   测试多个可能的注入点。<br><br># Level <span class="hljs-number">3</span>：在 Level <span class="hljs-number">3</span> 中，SQLmap 将进一步扩展其测试范围，可能会涉及：<br>#   检测 cookie 或其他 HTTP 请求参数中的注入点。<br>#   测试更复杂的 <span class="hljs-keyword">SQL</span> 注入漏洞，如深度嵌套的 <span class="hljs-keyword">SQL</span> 查询或存储过程。<br>#   测试更多不同类型的数据库。<br><br># Level <span class="hljs-number">4</span>：在 Level <span class="hljs-number">4</span> 中，SQLmap 将采用更多的高级技术和深度测试，这可能包括：<br>#   测试对目标系统的各种服务进行深度扫描，以寻找更多的注入点。<br>#   测试对目标系统进行较为精细的指纹识别，以定制更有效的注入攻击。<br><br># Level <span class="hljs-number">5</span>：在 Level <span class="hljs-number">5</span> 中，SQLmap 将启用所有可用的测试和技术，这可能包括：<br>#   对目标系统的所有输入点进行广泛的测试，包括 HTTP 请求中的各种参数和 cookies。<br>#   使用高度复杂的注入模式，如二次注入、堆叠注入等。<br>#   对目标系统进行更广泛和深入的分析，以确定可能存在的漏洞点。<br><span class="hljs-comment">--level N</span><br><br><br># 让SQLmap自己爬网页上的注入点<br><span class="hljs-comment">--forms</span><br><br># 有时候因为TLS<span class="hljs-operator">/</span>SSL问题会导致sqlmap连不上（但是浏览器又可以正常访问），直接使用此命令即可<br><span class="hljs-comment">--force-ssl</span><br></code></pre></td></tr></table></figure><h3 id="成功注入后会使用的参数"><a href="#成功注入后会使用的参数" class="headerlink" title="成功注入后会使用的参数"></a>成功注入后会使用的参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 直接执行<span class="hljs-keyword">SQL</span>语法<br># 注意，CRUD语法不一定支持，即使有堆叠注入建议还是手动操作<br><span class="hljs-comment">--sql-query &quot;select version()&quot;</span><br><br># 列出数据库banner、version信息<br><span class="hljs-operator">-</span>b<br><br># 列出所有数据库<br><span class="hljs-comment">--dbs</span><br><br># 指定数据库名称<br><span class="hljs-operator">-</span>D &quot;DB_Name&quot;<br><br># 列出指定数据库内的所有表（需搭配<span class="hljs-operator">-</span>D参数）<br><span class="hljs-comment">--tables</span><br><br># 指定表名称<br><span class="hljs-operator">-</span>T &quot;Table_Name&quot;<br><br># 列出指定表内的所有列（需搭配<span class="hljs-operator">-</span>T参数）<br><span class="hljs-comment">--columns</span><br><br># 指定要列出的列数据<br><span class="hljs-operator">-</span>C &quot;account,password&quot;<br><br># 指定不要列出的列数据<br><span class="hljs-operator">-</span>X &quot;id,time&quot;<br><br># 列出指定列的所有数据<br># 如果不使用<span class="hljs-operator">-</span>C参数，则列出指定表的所有字段数据<br><span class="hljs-comment">--dump</span><br><br># 仅列出符合<span class="hljs-keyword">where</span>条件的数据<br># 使用场景通常发生在，你只想查找管理员或某些特定数据，不想全部注入出来<br># 如果你只想获取user_id字段符合<span class="hljs-string">&#x27;admin&#x27;</span>字符串的数据<br><span class="hljs-comment">--where &quot;user_id=&#x27;admin&#x27;&quot;</span><br><br># 列出指定数据库内所有表的数据<br># （只需<span class="hljs-operator">-</span>D &quot;DB_Name&quot;即可，不需要后面的<span class="hljs-comment">--table等参数）</span><br><span class="hljs-comment">--dump-all</span><br><br># 检测数据库是否有DBA权限，例如读文件、写文件<br># 但这个结果仅供参考，不一定准确（个人实战经验）<br><span class="hljs-comment">--is-dba</span><br><br># 获取<span class="hljs-keyword">SQL</span>注入账号的密码哈希<br><span class="hljs-comment">--passwords</span><br><br># 检测当前使用的数据库<br><span class="hljs-comment">--current-db</span><br><br># 检测当前使用数据库的用户名<br><span class="hljs-comment">--current-user</span><br><br># 枚举当前注入点权限所能访问到的所有数据库用户<br><span class="hljs-comment">--users</span><br><br># 尝试读取指定路径下的文件<br><span class="hljs-comment">--file-read &quot;/etc/passwd&quot;</span><br><br># 指定尝试写入对方服务器的文件（需搭配<span class="hljs-comment">--file-dest参数）</span><br># 如果你直接把文件放在SQLmap目录，参数不一定要绝对路径，相对路径也可以<br><span class="hljs-comment">--file-write &quot;/your/file/path&quot;</span><br><br># 指定服务器后端的绝对路径（需搭配<span class="hljs-comment">--file-write参数）</span><br><span class="hljs-comment">--file-dest &quot;/server/root/path&quot;</span><br><br># 进入模拟<span class="hljs-keyword">SQL</span>指令互动环境<br><span class="hljs-comment">--sql-shell</span><br><br># 尝试获取远程命令执行（RCE）<br><span class="hljs-comment">--os-shell</span><br><br># 指定后端写文件路径，使用<span class="hljs-comment">--os-shell时可用</span><br><span class="hljs-comment">--web-root &quot;/var/www/html/upload&quot;</span><br><br># 指定后端系统类型，使用场景通常发生在SQLmap误判后端操作系统<br># 例如要操作读写文件时，后端是windows，结果写成linux路径导致失败<br># 可选值有：windows、macos、linux、unix<br><span class="hljs-comment">--os windows</span><br></code></pre></td></tr></table></figure><h3 id="例外情况"><a href="#例外情况" class="headerlink" title="例外情况"></a>例外情况</h3><p> 当手动测试确定存在注入但SQLmap检测不到时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 仅根据渲染完毕的静态html页面做比较<br><span class="hljs-comment">--text-only</span><br><br># 检测页面某个字符串作为布尔注入前后比较值<br><span class="hljs-comment">--string &quot;STR&quot;</span><br><br># 让SQLmap不对payload做URL encode编码<br><span class="hljs-comment">--skip-urlencode</span><br><br># 让SQLmap不将字符串做转义<br># 例如<span class="hljs-string">&#x27;abc&#x27;</span>不转义成<span class="hljs-number">0x616263</span>或<span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">98</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">99</span>)<br><span class="hljs-comment">--no-escape</span><br><br># 设置网页反应的延迟时间，默认是<span class="hljs-number">5</span>（这里指的是<span class="hljs-type">time</span><span class="hljs-operator">-</span>based注入技术时的反应检测时间）<br><span class="hljs-comment">--time-sec 10</span><br><br># 设置网页反应的延迟时间，默认是<span class="hljs-number">30</span>（这里指的是等待网页response的时间）<br><span class="hljs-comment">--timeout 60</span><br><br># 设置连接超时的重试次数，默认是<span class="hljs-number">3</span>次<br><span class="hljs-comment">--retries 5</span><br><br># 可能后端程序有错误导致<span class="hljs-number">500</span> http code，且sqlmap因该错误无法进行注入<br># 但是手动检测发现会有<span class="hljs-type">time</span><span class="hljs-operator">-</span>based反应之类的，让sqlmap忽略<span class="hljs-number">500</span> http code直接注入<br><span class="hljs-comment">--ignore-code 500</span><br><br># 有时候即使你想开启batch，但是SQLmap会自动选择默认选项（但可能该选项不是你想要的）<br># 那就可以使用此参数预先设置你要的结果，例如，注入过程中SQLmap询问：<br># redirect <span class="hljs-keyword">is</span> a <span class="hljs-keyword">result</span> <span class="hljs-keyword">of</span> a POST request. Do you want <span class="hljs-keyword">to</span> resend original POST data <span class="hljs-keyword">to</span> a <span class="hljs-keyword">new</span> location? [Y<span class="hljs-operator">/</span>n] Y<br># 如果你想选n，而不是默认的Y，则可以这样：<br># <span class="hljs-comment">--answer &quot;redirect is a result of a POST request. Do you want to resend original POST data to a new location=n&quot;</span><br># 但这样太长，其实也可以用部分内容，如下（主要是内容只要在一定范围内，SQLmap能识别是哪个问题的选择即可）<br><span class="hljs-comment">--answer &quot;redirect is a result=n&quot;</span><br></code></pre></td></tr></table></figure><h3 id="资料无法获取问题"><a href="#资料无法获取问题" class="headerlink" title="资料无法获取问题"></a>资料无法获取问题</h3><p>SQLmap明明已经注入出payload技术，但获取数据时却失败（或没有任何数据），有时候不一定是WAF的拦截，大概率是后端数据解析异常所导致（也有可能是误报，建议加上–flush-session重试），因此可尝试加上以下参数（实战中很常用到）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 将输出数据转换为<span class="hljs-number">16</span>进制数据后提取<br><span class="hljs-comment">--hex</span><br><br># 不要对注入的数据进行编码或者自动转换类型<br># 例如注入的字符是 var<span class="hljs-operator">=</span>test[<span class="hljs-number">0</span>]<span class="hljs-string">&#x27;-- a</span><br><span class="hljs-string"># 让SQLmap不要转换成 var=test%5B0%5D&#x27;</span><span class="hljs-comment">-- a</span><br># 或者让SQLmap不要对数据进行自动转型，比如把某个字符串转换成 <span class="hljs-type">VARCHAR</span> 类型<br><span class="hljs-comment">--no-cast</span><br></code></pre></td></tr></table></figure><h3 id="资料乱码问题"><a href="#资料乱码问题" class="headerlink" title="资料乱码问题"></a>资料乱码问题</h3><p>当注入出来的结果为乱码时，有可能字段是blob等因素，可以转成二进制输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 忽略存储在会话文件中的查询结果<br><span class="hljs-comment">--fresh-queries</span><br><br># 具有二进制值的结果字段（例如&quot;摘要&quot;）<br><span class="hljs-comment">--binary-fields column_name</span><br><br></code></pre></td></tr></table></figure><h3 id="加速注入"><a href="#加速注入" class="headerlink" title="加速注入"></a>加速注入</h3><p>当你非常清楚漏洞情况并且想跳过一些测试负载，你可以使用如下参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 指定SQLmap只测试哪种模板的有效负载<br># 例如 <span class="hljs-comment">--test-filter &quot;Microsoft SQL Server/Sybase stacked queries (DECLARE)&quot;</span><br># 就只会测试<span class="hljs-keyword">DECLARE</span>的堆叠注入<br><span class="hljs-comment">--test-filter &quot;payload template name&quot;</span><br><br># 指定SQLmap跳过测试哪种模板的有效负载<br># 例如 <span class="hljs-comment">--test-filter &quot;Microsoft SQL Server/Sybase stacked queries (DECLARE)&quot;</span><br># 就会跳过测试<span class="hljs-keyword">DECLARE</span>的堆叠注入模板<br><span class="hljs-comment">--test-skip &quot;payload template name&quot;</span><br><br>python sqlmap.py ... <span class="hljs-comment">--test-skip=&#x27;(MySQL &gt; 5)|(MySQL &gt;= 5)&#x27;</span><br><br>或者<br><br>python sqlmap.py ... <span class="hljs-comment">--test-skip=&#x27;MySQL &gt;=? 5&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 当某个注入点会先存储payload，在访问其他页面才会触发执行<span class="hljs-keyword">SQL</span>语句时可用<br><span class="hljs-comment">--second-url &quot;http://target.com/sqli.php&quot;</span><br><br># 如果不是单纯用<span class="hljs-keyword">GET</span>访问可触发，可能需要POST之类的复杂请求<br># 就可以改用文件的方式直接给header让sqlmap解析，就像 <span class="hljs-operator">-</span>r 参数那样<br><span class="hljs-comment">--second-req xxx.req</span><br></code></pre></td></tr></table></figure><h3 id="常用绕过waf脚本"><a href="#常用绕过waf脚本" class="headerlink" title="常用绕过waf脚本"></a>常用绕过waf脚本</h3><p>当防火墙阻挡规则有迹可循且不复杂，也可以自己编写绕过脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--tamper space2comment,space2hash,space2mssqlhash</span><br><br># 当规则可能很简单，你不想写tamper，也可以改用<span class="hljs-comment">--eval参数（但只能测试一种参数）</span><br># 如果目标为 xxx.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>，且你只想将<span class="hljs-keyword">AND</span>换成<span class="hljs-operator">&amp;&amp;</span>，则可以<br><span class="hljs-comment">--eval &quot;id=id.replace(&#x27; AND &#x27;,&#x27; &amp;&amp; &#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="captcha"><a href="#captcha" class="headerlink" title="captcha"></a>captcha</h3><p>当注入点需要先通过captcha图形验证码时，可以使用此参数来串联图形识别模块以绕过此限制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--preprocess &quot;/path/to/captcha_bypass.py&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络安全实战提升计划</title>
    <link href="/2025/09/03/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8F%90%E5%8D%87%E8%AE%A1%E5%88%92/"/>
    <url>/2025/09/03/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8F%90%E5%8D%87%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="网络安全实战提升计划"><a href="#网络安全实战提升计划" class="headerlink" title="网络安全实战提升计划"></a>网络安全实战提升计划</h1><h2 id="🎯-学习背景与目标"><a href="#🎯-学习背景与目标" class="headerlink" title="🎯 学习背景与目标"></a>🎯 学习背景与目标</h2><p>你已掌握Web安全理论知识（如上传漏洞、SQL注入等），希望将知识转化为实战能力，并系统学习新技术。本计划为期8周，注重实战应用与技能拓展。</p><h2 id="📅-计划概览"><a href="#📅-计划概览" class="headerlink" title="📅 计划概览"></a>📅 计划概览</h2><table><thead><tr><th align="center">阶段</th><th align="center">周数</th><th>重点内容</th></tr></thead><tbody><tr><td align="center">一</td><td align="center">第1周</td><td>环境搭建与工具熟练</td></tr><tr><td align="center">二</td><td align="center">第2-3周</td><td>已知漏洞深度实战</td></tr><tr><td align="center">三</td><td align="center">第4-5周</td><td>综合靶场实战</td></tr><tr><td align="center">四</td><td align="center">第6-8周</td><td>真实世界练习与新技术学习</td></tr></tbody></table><h2 id="📌-第一阶段：环境搭建与基础巩固（第1周）"><a href="#📌-第一阶段：环境搭建与基础巩固（第1周）" class="headerlink" title="📌 第一阶段：环境搭建与基础巩固（第1周）"></a>📌 第一阶段：环境搭建与基础巩固（第1周）</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>建立专属渗透测试环境，熟练使用基本工具。</p><h3 id="每日安排"><a href="#每日安排" class="headerlink" title="每日安排"></a>每日安排</h3><table><thead><tr><th align="center">时间投入</th><th align="center">学习内容</th><th align="center">实战练习</th></tr></thead><tbody><tr><td align="center">1-2小时</td><td align="center">• 安装Kali Linux虚拟机<br>• 配置Burp Suite专业版<br>• 学习常用命令和工具</td><td align="center">• 搭建DVWA漏洞演练环境<br>• 配置浏览器代理与Burp联动</td></tr><tr><td align="center">3-4小时</td><td align="center">• 深入学习Burp Suite各项功能<br>• 安装浏览器渗透测试插件</td><td align="center">• 使用Burp重放、修改HTTP请求<br>• 练习Intruder模块进行暴力破解</td></tr></tbody></table><h3 id="本周产出"><a href="#本周产出" class="headerlink" title="本周产出"></a>本周产出</h3><p>完成渗透测试环境搭建，能够熟练使用Burp Suite拦截和修改请求。</p><h2 id="📌-第二阶段：已知漏洞类型深度实战（第2-3周）"><a href="#📌-第二阶段：已知漏洞类型深度实战（第2-3周）" class="headerlink" title="📌 第二阶段：已知漏洞类型深度实战（第2-3周）"></a>📌 第二阶段：已知漏洞类型深度实战（第2-3周）</h2><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><p>将理论知识转化为实际漏洞发现和利用能力。</p><h3 id="重点漏洞与资源"><a href="#重点漏洞与资源" class="headerlink" title="重点漏洞与资源"></a>重点漏洞与资源</h3><table><thead><tr><th align="center">漏洞类型</th><th align="center">学习资源</th><th align="center">实战平台</th></tr></thead><tbody><tr><td align="center"><strong>SQL注入</strong></td><td align="center">• 《SQL注入攻击与防御》<br>• SQLMap高级用法</td><td align="center">DVWA、SQLi-Labs</td></tr><tr><td align="center"><strong>文件上传</strong></td><td align="center">• 绕过上传限制的各种技巧<br>• 解析漏洞利用</td><td align="center">Upload-Labs</td></tr><tr><td align="center"><strong>XSS</strong></td><td align="center">• 三种XSS深度练习<br>• BeEF框架使用</td><td align="center">XSS挑战平台</td></tr><tr><td align="center"><strong>CSRF&#x2F;SSRF</strong></td><td align="center">• 构造CSRF攻击页面<br>• SSRF内网探测</td><td align="center">综合靶场</td></tr></tbody></table><h3 id="每日流程"><a href="#每日流程" class="headerlink" title="每日流程"></a>每日流程</h3><ul><li><strong>30分钟</strong>：阅读漏洞原理和利用技巧</li><li><strong>1-2小时</strong>：在靶场练习相应漏洞</li><li><strong>30分钟</strong>：记录学习笔记和漏洞利用过程</li></ul><h2 id="📌-第三阶段：综合靶场实战（第4-5周）"><a href="#📌-第三阶段：综合靶场实战（第4-5周）" class="headerlink" title="📌 第三阶段：综合靶场实战（第4-5周）"></a>📌 第三阶段：综合靶场实战（第4-5周）</h2><h3 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h3><p>培养漏洞组合利用和完整渗透能力。</p><h3 id="推荐平台"><a href="#推荐平台" class="headerlink" title="推荐平台"></a>推荐平台</h3><ol><li><strong>HackTheBox</strong>（从简单机器开始）</li><li><strong>TryHackMe</strong>（Guided Learning Path）</li><li><strong>VulnHub</strong>（各种虚拟机靶场）</li><li>国内i春秋、合天等实验平台</li></ol><h3 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h3><pre><code class=" mermaid">graph TD    A[信息收集] --&gt; B[漏洞探测]    B --&gt; C[漏洞利用]    C --&gt; D[权限提升]    D --&gt; E[痕迹清理]    E --&gt; F[报告撰写]</code></pre><h3 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h3><ul><li>每周攻克1-2个综合靶场（根据难度调整）</li><li>每次练习后撰写详细渗透报告</li></ul><h2 id="📌-第四阶段：真实世界练习与新技术学习（第6-8周）"><a href="#📌-第四阶段：真实世界练习与新技术学习（第6-8周）" class="headerlink" title="📌 第四阶段：真实世界练习与新技术学习（第6-8周）"></a>📌 第四阶段：真实世界练习与新技术学习（第6-8周）</h2><h3 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h3><p>接触真实漏洞和学习新领域知识。</p><h3 id="实践内容"><a href="#实践内容" class="headerlink" title="实践内容"></a>实践内容</h3><ol><li>参与漏洞众测平台（如漏洞盒子、CNVD）</li><li>学习自动化漏洞扫描工具编写</li><li>研究SRC（安全应急响应中心）漏洞报告</li><li>学习WAF绕过技巧</li></ol><h3 id="新技术学习"><a href="#新技术学习" class="headerlink" title="新技术学习"></a>新技术学习</h3><ul><li><strong>第6周</strong>：云安全基础（AWS&#x2F;Azure安全配置）</li><li><strong>第7周</strong>：容器安全（Docker安全实践）</li><li><strong>第8周</strong>：API安全测试（Swagger分析、API端点测试）</li></ul><h2 id="⏰-每周时间分配建议"><a href="#⏰-每周时间分配建议" class="headerlink" title="⏰ 每周时间分配建议"></a>⏰ 每周时间分配建议</h2><table><thead><tr><th align="center">每日可用时间</th><th align="left">学习安排</th></tr></thead><tbody><tr><td align="center"><strong>1-2小时</strong></td><td align="left">• 30%新技术理论学习<br>• 70%靶场练习</td></tr><tr><td align="center"><strong>3-4小时</strong></td><td align="left">• 20%阅读技术文章<br>• 50%实战练习<br>• 30%写笔记&#x2F;报告</td></tr><tr><td align="center"><strong>周末</strong></td><td align="left">参与CTF比赛或攻克复杂靶场</td></tr></tbody></table><h2 id="🧰-必备工具清单"><a href="#🧰-必备工具清单" class="headerlink" title="🧰 必备工具清单"></a>🧰 必备工具清单</h2><ol><li><strong>渗透测试</strong>：Burp Suite、SQLMap、Nmap</li><li><strong>代码审计</strong>：Semgrep、CodeQL（逐步学习）</li><li><strong>内网渗透</strong>：Cobalt Strike、Metasploit</li><li><strong>漏洞利用</strong>：自定义Python脚本编写</li></ol><h2 id="📖-学习效果保障"><a href="#📖-学习效果保障" class="headerlink" title="📖 学习效果保障"></a>📖 学习效果保障</h2><ol><li><strong>保持记录</strong>：建立自己的知识库，记录漏洞利用方法和技巧</li><li><strong>加入社区</strong>：参与安全社区讨论，关注安全会议（如KCon、BlackHat）</li><li><strong>实践优先</strong>：理论学习和实战比例保持在3:7</li><li><strong>寻找伙伴</strong>：寻找学习伙伴一起打CTF或分析漏洞</li></ol><h2 id="🚀-后续发展建议"><a href="#🚀-后续发展建议" class="headerlink" title="🚀 后续发展建议"></a>🚀 后续发展建议</h2><p>完成8周计划后，可根据兴趣选择方向深入：</p><ul><li><strong>Web安全专家</strong>：深耕漏洞挖掘和代码审计</li><li><strong>渗透测试工程师</strong>：学习内网渗透和域环境</li><li><strong>安全开发工程师</strong>：学习安全工具开发</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ai提问模板</title>
    <link href="/2025/09/01/ai%E6%8F%90%E9%97%AE%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/09/01/ai%E6%8F%90%E9%97%AE%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="一、基础指令型（明确需求边界，快速获取精准结果）"><a href="#一、基础指令型（明确需求边界，快速获取精准结果）" class="headerlink" title="一、基础指令型（明确需求边界，快速获取精准结果）"></a>一、基础指令型（明确需求边界，快速获取精准结果）</h3><p>核心作用：通过定义角色、目标、输出形式，让AI直接匹配需求，适合基础信息获取、主题内容梳理。</p><ol><li><p><strong>RTF框架（角色-Role、任务-Task、格式-Format）</strong><br>核心：先给AI“身份”，再派“任务”，最后定“输出样式”。<br>示例：“扮演职场礼仪讲师（角色），整理商务会议中的3个核心礼仪要点（任务），以‘要点+具体场景’的分点形式呈现（格式）。”</p></li><li><p><strong>TAG框架（目标-Target、行动-Action、指南-Guidance）</strong><br>核心：先明确“要达成的目标”，再让AI设计“具体行动”，最后补充“执行参考”。<br>示例：“目标是让新手快速学会煮奶茶（目标），帮我设计3个步骤的制作流程（行动），并标注每个步骤的常见错误及规避方法（指南）。”</p></li></ol><h3 id="二、深度验证型（聚焦信息严谨性，确保内容可靠）"><a href="#二、深度验证型（聚焦信息严谨性，确保内容可靠）" class="headerlink" title="二、深度验证型（聚焦信息严谨性，确保内容可靠）"></a>二、深度验证型（聚焦信息严谨性，确保内容可靠）</h3><p>核心作用：针对需要核实、论证的需求，让AI主动追溯来源、验证逻辑，适合学术研究、事实核查、观点分析。</p><ul><li><strong>SCRI框架（来源-Source、验证-Verification、结论-Conclusion、信息-Information）</strong><br>核心：先明确“要分析的信息”，再让AI找“权威来源”，验证“合理性”，最后给“明确结论”。<br>示例：“分析‘每天喝8杯水更健康’这一说法（信息），帮我查找2个权威医学机构（如WHO、中国营养学会）的相关研究（来源），验证该说法的适用人群和科学依据（验证），最后总结结论（结论）。”</li></ul><h3 id="三、落地规划型（拆解行动路径，适配个人-场景条件）"><a href="#三、落地规划型（拆解行动路径，适配个人-场景条件）" class="headerlink" title="三、落地规划型（拆解行动路径，适配个人&#x2F;场景条件）"></a>三、落地规划型（拆解行动路径，适配个人&#x2F;场景条件）</h3><p>核心作用：将抽象需求转化为可执行的步骤，或结合个人能力、时间等条件定制方案，适合学习、任务推进、项目落地。</p><ol><li><p><strong>GPS框架（目标-Goal、过程-Process、策略-Strategy）</strong><br>核心：先定“最终目标”，再拆解“执行过程”，最后给“高效策略”。<br>示例：“目标是1个月内掌握Excel基础函数（目标），拆解为‘第1周学求和&#x2F;计数函数，第2-3周学筛选&#x2F;排序，第4周练综合案例’的过程（过程），并给出‘每天练1个函数案例、用工作数据实操’的策略（策略）。”</p></li><li><p><strong>TARA框架（主题-Topic、角度-Angle、研究-Research、行动-Action）</strong><br> 核心：先定“核心主题”，再选“分析角度”，做“深度研究”，最后给“行动建议”。<br> 示例：“以‘年轻人理财’为主题（主题），从‘低风险理财工具’‘每月储蓄规划’两个角度（角度），研究3种适合新手的理财方式及风险（研究），最后给出‘先做收支记账、优先存应急金’的行动建议（行动）。”</p></li><li><p><strong>WET框架（意愿-Will、能力-Ability、时间-Time）</strong><br> 核心：结合“个人意愿”“现有能力”“可投入时间”，定制适配的方案。<br> 示例：“我有学PS修图的意愿（意愿），目前会基础图片裁剪，无专业工具（能力），每周能抽3小时学习（时间），帮我定制2个月的入门学习计划。”</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
